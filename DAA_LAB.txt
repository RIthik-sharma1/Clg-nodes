EX .NO.1

Date:

QUICK SORT

Aim:
Sort a given set of elements using the Quick sort method and determine the time required
to sort the elements. Repeat the experiment for different values of ( n ), the number of
elements in the list to be sorted. The elements can be read from a file or can be generated
using the random number generator.
Algorithm:
1. Start
2. Read the number of array elements ( n )
3. Read array elements ( A_i )
4. Select a pivot element ( x ) from ( A_i )
5. Divide the array into 3 sequences: elements < ( x ), ( x ), elements > ( x )
6. Recursively quick sort both sets (( A_i < x ) and ( A_i > x ))
7. Stop
PROGRAM
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void quicksort(int[], int, int);
int partition(int[], int, int);
void generate_random_array(int[], int);
void read_array_from_file(int[], int*);
int main() {
int i, n, a[1000], ch = 1, source_choice;
clock_t start, end;
while (ch) {
printf("Choose the input method:\n");
printf("1. Generate random array\n");
printf("2. Read array from file\n");
scanf("%d", &source_choice);
if (source_choice == 1) {

printf("Enter the number of elements: ");
scanf("%d", &n);
generate_random_array(a, n);
} else if (source_choice == 2) {
read_array_from_file(a, &n);
} else {
printf("Invalid choice. Exiting.\n");
return 0;
}
printf("Array elements:\n");
for (i = 0; i < n; i++) {
printf("%d ", a[i]);
}
printf("\n");
start = clock();
quicksort(a, 0, n - 1);
end = clock();
printf("Sorted array elements are:\n");
for (i = 0; i < n; i++) {
printf("%d ", a[i]);
}
printf("\nTime taken = %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
printf("Do you want to continue (0/1)? ");
scanf("%d", &ch);
}
return 0;
}
void quicksort(int a[], int low, int high) {
int mid;
if (low < high) {
mid = partition(a, low, high);
quicksort(a, low, mid - 1);
quicksort(a, mid + 1, high);
}
}
int partition(int a[], int low, int high) {
int key, i, j, temp;
key = a[low];

i = low + 1;
j = high;
while (i <= j) {
while (i <= high && key >= a[i]) i++;
while (key < a[j]) j--;
if (i < j) {
temp = a[i];
a[i] = a[j];
a[j] = temp;
} else {
temp = a[j];
a[j] = a[low];
a[low] = temp;
}
}
return j;
}
void generate_random_array(int a[], int n) {
srand(time(0));
for (int i = 0; i < n; i++) {
a[i] = rand() % 1000;
}
}
void read_array_from_file(int a[], int *n) {
FILE *file = fopen("input.txt", "r");
if (file == NULL) {
printf("File not found. Exiting.\n");
exit(1);
}
int i = 0;
while (fscanf(file, "%d", &a[i]) != EOF && i < 1000) {
i++;
}
*n = i;
fclose(file);
}
```
OUTPUT

```
Choose the input method:
1. Generate random array
2. Read array from file
1
Enter the number of elements: 5
Array elements:
34 7 23 32 5
Sorted array elements are:
5 7 23 32 34
Time taken = 0.000123 seconds
Do you want to continue (0/1)?

RESULT:
Thus, an array was sorted using Quick sort's divide and conquer method and the time
required to sort the elements was determined. The experiment was repeated for different
values of \( n \), with the elements being read from a file or generated using a random
number generator.

EX .NO.2

Date:

MERGE SORT

Aim:
Implement a Merge Sort algorithm to sort a given set of elements and determine the time required to
sort the elements. Repeat the experiment for different values of nnn, the number of elements in the list
to be sorted. The elements can be read from a file or can be generated using the random number
generator.
Algorithm
1. Start
2. Read the number of array elements nnn
3. Read array elements AiA_iAi
4. Divide the array into two halves
5. Recursively merge sort both halves
6. Merge the two sorted halves
7. Stop
PROGRAM
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void mergeSort(int[], int, int);
void merge(int[], int, int, int);
void generate_random_array(int[], int);
void read_array_from_file(int[], int*);
int main() {
int i, n, a[1000], ch = 1, source_choice;
clock_t start, end;
while (ch) {
printf("Choose the input method:\n");
printf("1. Generate random array\n");
printf("2. Read array from file\n");
scanf("%d", &source_choice);
if (source_choice == 1) {
printf("Enter the number of elements: ");
scanf("%d", &n);

generate_random_array(a, n);
} else if (source_choice == 2) {
read_array_from_file(a, &n);
} else {
printf("Invalid choice. Exiting.\n");
return 0;
}
printf("Array elements:\n");
for (i = 0; i < n; i++) {
printf("%d ", a[i]);
}
printf("\n");
start = clock();
mergeSort(a, 0, n - 1);
end = clock();
printf("Sorted array elements are:\n");
for (i = 0; i < n; i++) {
printf("%d ", a[i]);
}
printf("\nTime taken = %lf seconds\n", (double)(end - start) / CLOCKS_PER_SEC);
printf("Do you want to continue (0/1)? ");
scanf("%d", &ch);
}
return 0;
}
void mergeSort(int a[], int low, int high) {
if (low < high) {
int mid = (low + high) / 2;
mergeSort(a, low, mid);
mergeSort(a, mid + 1, high);
merge(a, low, mid, high);
}
}
void merge(int a[], int low, int mid, int high) {
int i, j, k, n1, n2;
n1 = mid - low + 1;
n2 = high - mid;

int L[n1], R[n2];
for (i = 0; i < n1; i++)
L[i] = a[low + i];
for (j = 0; j < n2; j++)
R[j] = a[mid + 1 + j];
i = 0;
j = 0;
k = low;
while (i < n1 && j < n2) {
if (L[i] <= R[j]) {
a[k] = L[i];
i++;
} else {
a[k] = R[j];
j++;
}
k++;
}
while (i < n1) {
a[k] = L[i];
i++;
k++;
}
while (j < n2) {
a[k] = R[j];
j++;
k++;
}
}
void generate_random_array(int a[], int n) {
srand(time(0));
for (int i = 0; i < n; i++) {
a[i] = rand() % 1000;
}
}
void read_array_from_file(int a[], int *n) {
FILE *file = fopen("input.txt", "r");
if (file == NULL) {

printf("File not found. Exiting.\n");
exit(1);
}
int i = 0;
while (fscanf(file, "%d", &a[i]) != EOF && i < 1000) {
i++;
}
*n = i;
fclose(file);
}
OUTPUT:
Copy code
Choose the input method:
1. Generate random array
2. Read array from file
1
Enter the number of elements: 5
Array elements:
34 7 23 32 5
Sorted array elements are:
5 7 23 32 34
Time taken = 0.000456 seconds
Do you want to continue (0/1)?

RESULT
Thus, an array was sorted using the Merge Sort method and the time required to sort the elements was
determined. The experiment was repeated for different values of nnn, with the elements being read
from a file or generated using a random number generator.

Ex. No:3(A)
Date:

TOPOLOGICAL ORDERING

Aim:
To obtain the topological ordering of vertices in a given digraph.
Algorithm:
1. Start
2. Read the number of vertices nnn and edges eee in the digraph
3. Read the adjacency list for the digraph
4. Initialize an array to keep track of visited vertices
5. Initialize a stack to store the topological order
6. For each vertex, if it is not visited, perform a Depth First Search (DFS)
7. In DFS, mark the current vertex as visited, recursively visit all its adjacent vertices, and push
the current vertex onto the stack
8. Pop all vertices from the stack to get the topological order
9. Stop
PROGRAM
#include <stdio.h>
#include <stdlib.h>
#define MAX 100
void topologicalSortUtil(int v, int visited[], int stack[], int
*top, int graph[MAX][MAX], int n);
void topologicalSort(int graph[MAX][MAX], int n);
int main() {
int n, e;
int graph[MAX][MAX] = {0};
int i, u, v;
printf("Enter the number of vertices: ");
scanf("%d", &n);
printf("Enter the number of edges: ");
scanf("%d", &e);

printf("Enter the edges (u v):\n");
for (i = 0; i < e; i++) {
scanf("%d %d", &u, &v);
graph[u][v] = 1;
}
printf("Topological ordering of the vertices:\n");
topologicalSort(graph, n);
return 0;
}
void topologicalSortUtil(int v, int visited[], int stack[], int
*top, int graph[MAX][MAX], int n) {
visited[v] = 1;
for (int i = 0; i < n; i++) {
if (graph[v][i] && !visited[i]) {
topologicalSortUtil(i, visited, stack, top, graph, n);
}
}
stack[(*top)++] = v;
}
void topologicalSort(int graph[MAX][MAX], int n) {
int visited[MAX] = {0};
int stack[MAX];
int top = 0;
for (int i = 0; i < n; i++) {
if (!visited[i]) {
topologicalSortUtil(i, visited, stack, &top, graph, n);
}
}
for (int i = top - 1; i >= 0; i--) {
printf("%d ", stack[i]);
}
printf("\n");
}
OUTPUT
Enter the number of vertices: 6
Enter the number of edges: 6
Enter the edges (u v):

5 2
5 0
4 0
4 1
2 3
3 1
Topological ordering of the vertices:
5 4 2 3 1 0

RESULT:
Thus, the topological ordering of vertices in a given digraph was obtained.

Ex. No:3(B)
Date:
AIM:

TRANSITIVE CLOSURE OF A GIVEN DIRECTED GRAPH USING
WARSHALL'S ALGORITHM

To compute the transitive closure of a given directed graph using Warshall’s algorithm.

ALGORITHM:
path exists between two vertices i, j,
• there is an edge from i to j; or
• there is a path from i to j going through vertex 1; or
• there is a path from i to j going through vertex 1 and/or 2; or
• there is a path from i to j going through vertex 1, 2, and/or 3; or
• there is a path from i to j going through any of the other vertices 3 3 3
Recurrence relating elements R(k) to elements of
R(k-1) is: R(k) [i,j] = R(k-1)[i,j] or (R(k-1)[i,k] and R(k-1)[k,j])
It implies the following rules for generating R(k) from R(k-1):
Rule 1 If an element in row i and column j is 1 in R(k-1) , it remains 1 in R(k)
Rule 2 If an element in row i and column j is 0 in R(k-1) , it has to be changed to 1 in R(k)
it has to be changed to 1 in R if and only if (k) if and only if the element in its row i and
column k and the element in its column j and row k are both 1’s in R(k-1)

PROGRAM:
#include<stdio.h>
#include<conio.h> int
a[10][10];
void main()
{
intj,k,n;
clrscr();
printf("enter the number of vertice\n");
scanf("%d",&n);
printf("enter the adjacency matrix");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&a[i][j]);
for(k=1;k<=n;k++)

for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
a[i][j]=a[i][j] || a[i][k] && a[k][j]; printf("\n
the transitive closure is\n"); for(i=1;i<=n;i++)
{
}
}
getch();

OUTPUT:

RESULT:
Thus the program is computed, executed successfully and the output is verified.

Ex. No:4
Date:

KNAPSACK PROBLEM

AIM:
To implement the 0/1 Knapsack problem using Dynamic Programming.
ALGORITHM:
1. Start
2. Read the number of items nnn
3. Read the weights and values of the items
4. Read the maximum capacity of the knapsack WWW
5. Initialize a 2D array dpdpdp of size (n+1)×(W+1)(n+1) \times (W+1)(n+1)×(W+1) to store the
maximum value for each subproblem
6. For each item iii from 1 to nnn:
o For each weight www from 0 to WWW:
 If the weight of the current item wiw_iwi is less than or equal to www:
 Set dp[i][w]dp[i][w]dp[i][w] to the maximum of dp[i−1][w]dp[i1][w]dp[i−1][w] and dp[i−1][w−wi]+vidp[i-1][w-w_i] + v_idp[i−1][w−wi
]+vi
 Else, set dp[i][w]dp[i][w]dp[i][w] to dp[i−1][w]dp[i-1][w]dp[i−1][w]
7. The value at dp[n][W]dp[n][W]dp[n][W] will be the maximum value that can be obtained with
the given knapsack capacity
8. Stop
PROGRAM
#include <stdio.h>
int max(int a, int b) {
return (a > b) ? a : b;
}
void knapsack(int W, int wt[], int val[], int n) {
int i, w;
int dp[n+1][W+1];
// Build table dp[][] in bottom up manner
for (i = 0; i <= n; i++) {
for (w = 0; w <= W; w++) {
if (i == 0 || w == 0)
dp[i][w] = 0;
else if (wt[i-1] <= w)
dp[i][w] = max(val[i-1] + dp[i-1][w-wt[i-1]], dp[i1][w]);
else
dp[i][w] = dp[i-1][w];
}

}
// Print the final table
printf("DP Table:\n");
for (i = 0; i <= n; i++) {
for (w = 0; w <= W; w++) {
printf("%d ", dp[i][w]);
}
printf("\n");
}
// Print the result
printf("Maximum value in knapsack = %d\n", dp[n][W]);
}
int main() {
int n, W;
printf("Enter the number of items: ");
scanf("%d", &n);
int val[n], wt[n];
printf("Enter the values of the items:\n");
for (int i = 0; i < n; i++) {
scanf("%d", &val[i]);
}
printf("Enter the weights of the items:\n");
for (int i = 0; i < n; i++) {
scanf("%d", &wt[i]);
}
printf("Enter the maximum capacity of the knapsack: ");
scanf("%d", &W);
knapsack(W, wt, val, n);
return 0;
}

OUTPUT:
Enter the number of items: 4
Enter the values of the items:
60 100 120 150
Enter the weights of the items:
10 20 30 40

Enter the maximum capacity of the knapsack: 50
DP Table:
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60
60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60 60
60
0 0 0 0 0 0 0 0 0 0 60 60 60 60 60 60 60 60 60 60 100 100 100 100
100 100 100 100 100 100 160 160 160 160 160 160 160 160 160 160 160
160 160 160 160 160 160 160 160 160
0 0 0 0 0 0 0 0 0 0 60 60 60 60 60 60 60 60 60 60 100 100 100 100
100 100 100 100 100 100 160 160 160 160 160 160 160 160 160 160 220
220 220 220 220 220 220 220 220 220
0 0 0 0 0 0 0 0 0 0 60 60 60 60 60 60 60 60 60 60 100 100 100 100
100 100 100 100 100 100 160 160 160 160 160 160 160 160 160 160 220
220 220 220 220 220 220 220 220 220
Maximum value in knapsack = 220

RESULT
Thus, the 0/1 Knapsack problem was implemented using Dynamic Programming, and the maximum
value that can be obtained with the given knapsack capacity was determined.

Ex. No:5
Date:

DIJIKSTRA’S ALGORITHM

AIM
To form a given vertex in a weighted connected graph and to find shortest paths to other vertices
using Dijkstra’s algorithm.

ALGORITHM
Create a shortest path tree set that keeps track of vertices included in shortest path tree,
i.e., whose minimum distance from source is calculated and finalized. Initially, this set is empty.
- Assign a distance value to all vertices in the input graph. Initialize all distance values as
INFINITE.
-Assign distance value as 0 for the source vertex so that it is picked first.
- While shortest path tree set doesn’t include all vertices
a) Pick a vertex u which is not there in shortest path tree set and has minimum distance value.
b) Include u to shortest path tree set
c) Update distance value of all adjacent vertices of u. To update the distance values, iterate
through all adjacent vertices. For every adjacent vertex v, if sum of distance value of u (from source)
and weight of edge u-v, is less than the distance value of v, then update the distance value of v.

PROGRAM
#include<stdio.h>
main ()
{
int n, cost[15][15], i, j, s[15], v,dist[15],num,min;
printf ("Enter the vertices please\n");
scanf ("%d",&n);
printf ("Enter the cost of the edges please\n");
printf ("Enter 999 if the edge is not present or for the self loop\n");
for (i = 1; i<= n; i++)
for (j = 1; j<= n; j++)
scanf ("%d", &cost[i][j]);
printf ("Enter the Source vertex please\n");
scanf ("%d", &v);
for (i = 1; i<= n; i++)
{
s[i] = 0;
dist[i] = cost[v][i];
}
s[v] = 1;
dist[v] = 0;
for (num = 2; num <= n - 1; num++)
{
min = 999;
for (i = 1; i<= n; i++)
if (s[i] == 0 &&dist[i]<min)
{
min = dist[i];
j = i;

}
s[j]= 1;
for (i = 1; i<= n; i++)
{
if (s[i] == 0)
{
if (dist[i] >(dist[j] + cost[j][i]))
dist[i] = (dist[j] + cost[j][i]);
}
}
}
printf ("VERTEX\tDESTINATION\tCOST\n");
for (i = 1; i<= n; i++)
printf ("%d\t %d\t\t %d\n", v, i, dist[i]);
}

OUTPUT

Enter the vertices please
4
Enter the cost of the edges please
Enter 999 if the edge is not present or for the self loop
999 3 4 7
3 999 999 2
4 999 999 4
7
2
4 999
Enter the Source vertex please
1
VERTEX DESTINATION COST
1
1
0
1
2
3
1
3
4
1
4
5

RESULT
The program was verified and executed successfully.

Ex. No:6
Date:

KRUSKAL’S ALGORITHM

AIM
To find the Minimum Cost Spanning Tree of a given undirected graph using Kruskal’s algorithm.
ALGORITHM
1. Start
2. Sort all the edges in non-decreasing order of their weight
3. Initialize an empty spanning tree
4. For each edge in the sorted list:
o If adding the edge does not form a cycle, add it to the spanning tree
5. Stop when the spanning tree contains V−1V-1V−1 edges, where VVV is the number of vertices
PROGRAM
#include <stdio.h>
#include <stdlib.h>
#define MAX 100
typedef struct {
int u, v, w;
} Edge;
typedef struct {
int parent;
int rank;
} Subset;
int find(Subset subsets[], int i) {
if (subsets[i].parent != i)
subsets[i].parent = find(subsets, subsets[i].parent);
return subsets[i].parent;
}
void Union(Subset subsets[], int x, int y) {

int rootX = find(subsets, x);
int rootY = find(subsets, y);
if (subsets[rootX].rank < subsets[rootY].rank)
subsets[rootX].parent = rootY;
else if (subsets[rootX].rank > subsets[rootY].rank)
subsets[rootY].parent = rootX;
else {
subsets[rootY].parent = rootX;
subsets[rootX].rank++;
}
}
int cmp(const void *a, const void *b) {
Edge *edgeA = (Edge *)a;
Edge *edgeB = (Edge *)b;
return edgeA->w - edgeB->w;
}
void KruskalMST(Edge edges[], int V, int E) {
Edge result[MAX];
int e = 0;
int i = 0;
qsort(edges, E, sizeof(edges[0]), cmp);
Subset *subsets = (Subset *)malloc(V * sizeof(Subset));
for (int v = 0; v < V; ++v) {
subsets[v].parent = v;
subsets[v].rank = 0;
}
while (e < V - 1 && i < E) {
Edge next_edge = edges[i++];
int x = find(subsets, next_edge.u);
int y = find(subsets, next_edge.v);
if (x != y) {
result[e++] = next_edge;
Union(subsets, x, y);
}
}
printf("Following are the edges in the constructed MST\n");

int minimumCost = 0;
for (i = 0; i < e; ++i) {
printf("%d -- %d == %d\n", result[i].u, result[i].v,
result[i].w);
minimumCost += result[i].w;
}
printf("Minimum Cost Spanning Tree: %d\n", minimumCost);
free(subsets);
}
int main() {
int V, E;
printf("Enter the number of vertices: ");
scanf("%d", &V);
printf("Enter the number of edges: ");
scanf("%d", &E);
Edge edges[MAX];
printf("Enter the edges (u v w):\n");
for (int i = 0; i < E; i++) {
scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);
}
KruskalMST(edges, V, E);
return 0;
}

OUTPUT

Enter the number of vertices: 4
Enter the number of edges: 5
Enter the edges (u v w):
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4
Following are the edges in the constructed MST
2 -- 3 == 4
0 -- 3 == 5
0 -- 1 == 10
Minimum Cost Spanning Tree: 19

RESULT:

Thus, the Minimum Cost Spanning Tree of a given undirected graph was found using Kruskal’s
algorithm.

Ex. No:7(A)
Date:

BFS ALGORITHM

Aim
To print all the nodes reachable from a given starting node in a digraph using the BFS method.
Algorithm
1. Start
2. Read the number of vertices nnn and edges eee in the digraph
3. Read the adjacency list for the digraph
4. Read the starting node
5. Initialize a queue and enqueue the starting node
6. Initialize a visited array and mark the starting node as visited
7. While the queue is not empty:
o Dequeue a node from the queue
o For each adjacent node, if it is not visited, mark it as visited and enqueue it
8. Print all the visited nodes
9. Stop
PROGRAM
#include <stdio.h>
#include <stdlib.h>
#define MAX 100
typedef struct Node {
int data;
struct Node* next;
} Node;
void addEdge(Node* adj[], int u, int v) {
Node* newNode = (Node*)malloc(sizeof(Node));
newNode->data = v;
newNode->next = adj[u];
adj[u] = newNode;
}

void BFS(Node* adj[], int start, int n) {
int visited[MAX] = {0};
int queue[MAX], front = 0, rear = 0;
visited[start] = 1;
queue[rear++] = start;
printf("Nodes reachable from node %d: ", start);
while (front < rear) {
int u = queue[front++];
printf("%d ", u);
for (Node* p = adj[u]; p != NULL; p = p->next) {
if (!visited[p->data]) {
visited[p->data] = 1;
queue[rear++] = p->data;
}
}
}
printf("\n");
}
int main() {
int n, e, start;
printf("Enter the number of vertices: ");
scanf("%d", &n);
printf("Enter the number of edges: ");
scanf("%d", &e);
Node* adj[MAX] = {0};
printf("Enter the edges (u v):\n");
for (int i = 0; i < e; i++) {
int u, v;
scanf("%d %d", &u, &v);
addEdge(adj, u, v);
}
printf("Enter the starting node: ");
scanf("%d", &start);
BFS(adj, start, n);
return 0;
}

OUTPUT
Enter the number of vertices: 5
Enter the number of edges: 6
Enter the edges (u v):
0 1
0 2
1 2
1 3
2 3
3 4
Enter the starting node: 0
Nodes reachable from node 0: 0 1 2 3 4

RESULT
Thus, all the nodes reachable from a given starting node in a digraph were printed using the BFS
method.

Ex. No:7(B)
Date:

DFS ALGORITHM

AIM:
To check whether a given graph is connected or not using the DFS method.
ALGORITHM:
1. Start
2. Read the number of vertices nnn and edges eee in the graph
3. Read the adjacency list for the graph
4. Initialize a visited array to keep track of visited nodes
5. Perform DFS starting from any node (e.g., node 0)
6. Mark nodes as visit
